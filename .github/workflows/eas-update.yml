name: Update expo
on: [push]

jobs:
  easUpdate:
    name: EAS Update
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'github actions - gen update')

    steps:
      - name: Checkout repository
        id: get_repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.TOKEN_EXPO }}

      - name: Install dependencies
        run: |
          yarn install
          sudo apt-get update && sudo apt-get install -y expect

      - name: Install firebase
        run: npm install firebase-admin

      - name: Create expect script
        run: |
          echo '#!/usr/bin/expect -f
          set timeout 60
          spawn eas init
          expect {
            "Would you like to create a project for*" {
              send "y"
              exp_continue
            }
            "Link this project?*" {
              send "y"
              exp_continue
            }
            "Project is already linked to a different ID:*" {
              send "y"
              exp_continue
            }
            eof
          }' > eas_init_expect.sh
          chmod +x eas_init_expect.sh

      - name: EAS Init
        id: eas_init
        run: |
          ./eas_init_expect.sh > eas_init_output.txt 2>&1 || true
                    
      - name: View Output File
        run: |
          echo "Conteúdo do arquivo eas_init_output.txt:"
          cat eas_init_output.txt

      - name: Extract Project ID and Write to .env
        id: extract_project_id
        run: |
          if grep -q 'Project successfully linked' eas_init_output.txt; then
            echo "Encontrado 'Project successfully linked'"
            projectId=$(grep -oP 'Project successfully linked \(ID: [a-f0-9-]+\)' eas_init_output.txt | awk -F 'ID: ' '{print $2}' | tr -d ')')
          elif grep -q 'Existing project found' eas_init_output.txt; then
            echo "Encontrado 'Existing project found'"
            projectId=$(grep -oP 'Existing project found: @[^ ]* \(ID: [a-f0-9-]+\)' eas_init_output.txt | awk -F 'ID: ' '{print $2}' | tr -d ')')
          else
            echo "Erro: Project ID não encontrado na saída."
            exit 1
          fi
          echo "Project ID extraído: $projectId"
          echo "PROJECT_ID=$projectId" >> .env

      - name: View .env File
        run: |
          echo "Conteúdo do arquivo .env:"
          cat .env
      
      - name: Configure EAS project
        run: |
          source .env
          echo "Configurando o projeto EAS com o ID $PROJECT_ID"
          echo '#!/usr/bin/expect -f
          set timeout 60
          set project_id [lindex $argv 0]
          spawn eas init --id $project_id --non-interactive
          expect {
            "Project is already linked to a different ID:*" {
              send "y"
              exp_continue
            }
            eof
          }' > eas_configure_expect.sh

          chmod +x eas_configure_expect.sh
          ./eas_configure_expect.sh $PROJECT_ID

      - name: Create preview
        id: preview
        uses: expo/expo-github-action/preview@v8
        with:
          command: eas update --auto

      - name: Save Firebase Admin SDK credentials
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: echo "$FIREBASE_SERVICE_ACCOUNT" | jq '.' > firebase-admin-sdk.json

      - name: Update QR Code in Firestore
        env:
          USERID: ${{ secrets.USERID }}
          PROJECTID: ${{ secrets.PROJECTID }}
          QR_CODE_URL: ${{ steps.preview.outputs.qr }}
        run: |
          node -e "
          const admin = require('firebase-admin');
          const serviceAccount = require('./firebase-admin-sdk.json');

          admin.initializeApp({
            credential: admin.credential.cert(serviceAccount)
          });

          const db = admin.firestore();

          const updateQrCode = async () => {
            const userId = process.env.USERID;
            const projectId = process.env.PROJECTID;
            const qrCodeUrl = process.env.QR_CODE_URL;

            const docRef = db.collection('users').doc(userId).collection  ('projects').doc(projectId);
            await docRef.update({
              qrcodeUrl: qrCodeUrl
            });

            console.log('QR Code updated successfully.');
          };

          updateQrCode().catch(console.error);
          "
